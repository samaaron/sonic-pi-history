
defonce :val do
  OSCVal.new(8112)
end

defonce :out do
  #OSC::Client.new("192.168.15.14", 8112)
  #OSC::Client.new("10.0.0.8", 8112)
end

define :osc do |msg, val|
  #out.send(OSC::Message.new(msg, val))
end

define :amp do
  val.read("/palimpsest/amp")
end

define :left do
  val.read("/palimpsest/left")
end

define :right do
  val.read("/palimpsest/right")

end

define :colour do |idx=0|
  val.read("/palimpsest/colour", idx)
end

define :red do
  colour(0)
end

define :green do
  colour(1)
end

define :blue do
  colour(2)
end

o = false

with_fx :wobble do |w|
  defonce :wob, override: o do
    w
  end
  use_synth :dsaw
  defonce :s, override: o do
    play 40, sustain: 1000000, amp_slide: 0.2, cutoff_slide: 1
  end
  defonce :s1, override: o do
    play 40, sustain: 1000000, amp_slide: 0.2, cutoff_slide: 1
  end
  defonce :s2, override: o do
    play 40, sustain: 1000000, amp_slide: 0.2, cutoff_slide: 1
  end
  beat = 0

  define :live do
    cue :tick
    start = beat % 4
    size = start == 0 ? 0.8 : 0.5
    sleep 0.1
    tonic = chord(:e3, :minor).choose
    range = 36
    co = 70
    a = 0.1
    co = blue * 100 + 20


    n = note(:e3) + -12
    cn = chord(n, :m7).choose + 12
    use_synth_defaults release: 0.01


    control s, note: cn, cutoff: co, amp: a, detune: 24
    control s1, note: cn, cutoff: co, amp: a

    control s2, note: n, cutoff: co, amp: a

    control wob, amp_slide: 0.3, amp: 0.2, phase: 0.125, cutoff_max: 120, cutoff_min: 70, wave: 0, mix: 0.7
    beat += 1
  end

  in_thread(name: :live_loop) do
    loop do
      live
    end
  end
end

define :drumit do
  with_synth :dsaw do
    #   play :a6, release: 0.2, amp: 0.1, attack: 0, detune: 9
  end
  sync :tick

  #  sample :ambi_lunar_land, amp: 0.4, rate: 3.0/5

  use_synth :fm
  puts blue * 4
  n = chord((note :a3), :minor).choose - 0
  comment do
    with_fx :wobble, phase: 1, wave: 0, invert_wave: 1 do
      synth :bnoise, release: 0.1, attack: 0.1, amp: 0.8
    end
  end
  blue = 0.1
  green = rrand(0, 1)
  amp = 1
  with_fx :echo, phase: 0.1, amp: 0.89, bits: 6, sample_rate: 4000 + (10000 * amp) do
    #play [n].choose, amp: 2, attack: 0, release: 0.121, depth: blue * (4 * amp), divisor: green * (4 * amp)
    play [n].choose + 12, amp: 2, attack: 0, release: 0.121, depth: blue * (4 * amp), divisor: green * (4 * amp)

  end

  osc "/beat", n

end

in_thread(name: :drums) do
  loop do
    drumit
  end
end


in_thread(name: :drums2) do
  loop do
    drumit2
  end
end

in_thread(name: :meelody) do
  loop do
    melody
  end
end

define :drumit2 do
  sync :tick
  with_fx :none, bits: 5, mix: 0.4 do
    #sample :drum_heavy_kick, amp: 3
    sleep 0.2
    with_fx :echo, phase: 0.1, decay: 0.4, mix: 0.1, amp: 0.3 do
      sample :elec_snare, rate: -10, amp: 2

    end
    sleep 0.2

  end

end

define :melody do
  sync :tick
  sleep 0.1
  use_synth :prophet
  n = chord([:a2].choose, :minor).choose
  with_fx :reverb, phase: 0.2, mix: 0.7 do
    play n, attack: 0.5, amp: 3, release: 10, cutoff: rrand(50, 100)
  end

  sleep 10
end



comment do
  loop do
    v = val.read("/palimpsest/left")
    puts v
    sleep 0.125

  end
end